---
- name: fail if pl_k3s_token is NONE
  ansible.builtin.fail:
    msg: "token value can not be empty. Either pass is via k3s_token or set an inventory variable ht_k3s_token"
  when: pl_k3s_token == 'NONE'

- name: fail if pl_k3s_datastore_endpoint is NONE
  ansible.builtin.fail:
    msg: "token value can not be empty. Either pass is via k3s_datastore_endpoint or set an inventory variable ht_k3s_datastore_endpoint"
  when: pl_k3s_datastore_endpoint == 'NONE'

- name: check if done file exists
  ansible.builtin.stat:
    path: /etc/rancher/.k3s.play.done
  register: pl_play_done_file_check

- name: if play done file doesn't exists and pl_cluster_init is true then ensure no data in database data to begin with
  ansible.builtin.shell: psql '{{ht_k3s_datastore_endpoint}}' -c 'DROP OWNED BY current_user;'
  args:
    creates: /etc/rancher/.k3s.play.done
  ignore_errors: true
  delegate_to: 127.0.0.1
  when: pl_cluster_init and inventory_hostname == groups['control-plane'][0] and not pl_play_done_file_check.stat.exists

- name: ensure containerd service is running
  ansible.builtin.service:
    name: containerd
    state: started
    enabled: true

- name: ensure k3s binary locally
  ansible.builtin.get_url:
    url: "https://github.com/k3s-io/k3s/releases/download/{{pl_k3s_version}}/k3s"
    dest: /usr/local/sbin/k3s
    owner: root
    group: root
    mode: '0750'
  environment: "{{ http_proxy | default({}) }}"
  register: pl_k3s_binary_download

- name: ensure config file directory is present
  ansible.builtin.file:
    path: /etc/rancher/k3s
    state: directory
    owner: root
    group: root
    mode: '0750'

- name: ensure systemd service file for k3s service
  ansible.builtin.template:
    src: k3s-systemd.service.j2
    dest: /usr/lib/systemd/system/k3s.service
    owner: root
    group: root
    mode: '0644'
  register: pl_k3s_systemd_service_copy

- name: if last step has changed then perform daemon reload
  ansible.builtin.command: systemctl daemon-reload
  when: pl_k3s_systemd_service_copy is changed

- name: ensure sysconfig file
  ansible.builtin.template:
    src: k3s-sysconfig.j2
    dest: /etc/sysconfig/k3s
    owner: root
    group: root
    mode: '0640'
  register: pl_k3s_sysconfig_copy

- name: ensure k3s config file
  ansible.builtin.template:
    src: k3s-config.yaml.j2
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: root
    mode: '0640'
  register: pl_k3s_config_copy

- name: restart k3s service if any of the files update task has changed
  ansible.builtin.service:
    name: k3s
    state: restarted
  when: pl_k3s_systemd_service_copy is changed or pl_k3s_sysconfig_copy is changed or pl_k3s_config_copy is changed

- name: ensure k3s service is running
  ansible.builtin.service:
    name: k3s
    state: started
    enabled: true

- name: block for cluster init
  block:
    - name: ensure cilium binary is present
      ansible.builtin.get_url:
        url: 'https://github.com/cilium/cilium-cli/releases/download/{{pl_cilium_cli_version}}/cilium-{{ansible_system| lower}}-{{pl_cilium_cli_arch_type[ansible_architecture]}}.tar.gz'
        dest: /tmp/cilium-{{pl_cilium_cli_version}}.tar.gz
        owner: root
        group: root
        mode: '0644'

    - name: extract cilium cli binary
      ansible.builtin.unarchive:
        src: /tmp/cilium-{{pl_cilium_cli_version}}.tar.gz
        dest: /usr/sbin
        owner: root
        group: root
        mode: '0750'
        remote_src: true

    - name: install cilium CNI
      ansible.builtin.command: cilium install --version {{pl_cilium_version}}
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      args:
        creates: /etc/rancher/.k3s.play.done
      register: pl_cilium_cni_install

    - name: copy kubeconfig file for next fetch, use command instead of copy
      ansible.builtin.command: cp -af k3s.yaml .k3s.fetch
      args:
        chdir: /etc/rancher/k3s
        creates: /etc/rancher/k3s/.k3s.fetch

    - name: replace server address in this file
      ansible.builtin.replace:
        path: /etc/rancher/k3s/.k3s.fetch
        regexp: '^(\s+)server:\s+https://127.0.0.1:6443(.*)$'
        replace: '\1server: https://{{pl_k3s_api_endpoint}}:6443'

    - name: touch done file after cilium setup is done
      ansible.builtin.file:
        path: /etc/rancher/.cilium-cli-install.done
        state: touch
        owner: root
        group: root
        mode: '0644'
      when: pl_cilium_cni_install is changed

    - name: fetch new kubeconfig file
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/.k3s.fetch
        dest: "{{playbook_dir}}/../sharedfiles/manifests/.kubeconfig.yaml"
        flat: true

    - name: create envrc file for later use
      ansible.builtin.copy:
        dest: "{{playbook_dir}}/../sharedfiles/manifests/.envrc"
        content: 'export KUBECONFIG="${PWD}/.kubeconfig.yaml"'
        mode: '0600'
      delegate_to: 127.0.0.1
      register: pl_kubeconfig_envrc_copy

    - name: run direnv allow locally if last step has changed
      ansible.builtin.command: direnv allow
      args:
        chdir: "{{playbook_dir}}/../sharedfiles/manifests"
      when: pl_kubeconfig_envrc_copy is changed
      delegate_to: 127.0.0.1
  when: pl_cluster_init and not pl_play_done_file_check.stat.exists
